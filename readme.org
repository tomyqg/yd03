* configuration
- Kconfig_9854_hdbsr_480x800
- Screen : [+] Rotate is enabled or not (ENABLE_ROTATE)
  [[file:project/ctrlboard/scene.c::106]]
  ituSceneSetRotation(&theScene, ITU_ROT_270, ithLcdGetWidth(), ithLcdGetHeight());
- Peripheral
  RTC module : itp_rtc_interal.c
  [] I2S Output Pin Enable
- Upgrade
  [] Delete package file after upgrade finish or error
  Delay time after upgrade finish or error: 250
* TODO
** UI评估
*** 切图
以下序号对应JPG文件里的列，凡切出的图片，统一为PNG格式。
一个页面的内容放在一个独立文件夹内。
图片以尺寸大小+左下角位置信息命名，相同命名的加上数字后缀。
切出的图片均无需带有文字字体，但要在相应页文件夹内作一份字体、大小及其中心位置信息的描述性说明。
像素单位统一用PX

1.左边有三张小页，分别切出三张页面背景图，不带文字。右边上小点，切出两张背景透明的图，一个白底一个灰底。
2.3.4. 切出图标元素。右侧弧线切出背景透明的矩形块。
4.5.6. 无规律的动图效果要做中间过度图片，细腻度以中间过度图片数量为准，可先做成5到10张。
       绕中心旋转的动图，按同心元素切出背景透明的图片，图片命名加上旋转方向后缀（顺时针：-cw；逆时针：-ccw）。
*** 方案
**** 多字体支持
1. [[file:project/ctrlboard/scene.c::144]]
ituFtLoadFont(1, CFG_PRIVATE_DRIVE ":/font/AvenirLTStd-Roman.ttf", ITU_GLYPH_8BPP);

2. [[file:project/ctrlboard/CMakeLists.txt::219]]
file(COPY
    ${PROJECT_SOURCE_DIR}/data/font/AvenirLTStd-Roman.ttf
    DESTINATION ${CMAKE_BINARY_DIR}/data/private/font
    )
3. 在ITU中添加第二字体的文字
**** 转270度
file:project/ctrlboard/scene.c::106
ituSceneSetRotation(&theScene, ITU_ROT_270, ithLcdGetWidth(), ithLcdGetHeight());
**** 烧录log通过串口打印
file:project/bootloader/main.c::472
comments 472-504
  ==> #if defined(CFG_LCD_ENABLE) && defined(0)
**** scalecoverflow
file:sdk/include/ite/itu.h::751
**** sprite animation
**** 支持NANDFLASH
- 补丁
  file:sdk/share/upgrade/ug_partition.c::259
  #if !defined(_WIN32) && defined(CFG_NOR_ENABLE)
- Kconfig
  File=> Load
  SDK\build\_presettings => _config_spi_nand_boot
  載入此檔案會自動設定 NAND flash 設定
  另外 W25N01GVZEIG 須設定如下圖所示，在 Storage 類別的 Enable SPI NAND Boot 選項中，需選擇 Address HAS Dummy Byte
- nandflash 烧录
  先烧录 build/openrtos/ctrlboard/project/bootloader/kpros.sys
  然后U盘升级
**** 关键文件夹
xpl build/win32
xpl build/openrtos
xpl build/openrtos/ctrlboard/project/ctrlboard
xpl project/ctrlboard

**** otf -> ttf
https://cloudconvert.com/otf-to-ttf
https://www.fontke.com/tool/convfont/
**** bak
#+BEGIN_SRC c

#define CYCLE_R   190  //圆半径
#define CYCLE_X   400  //圆心X坐标
#define CYCLE_Y   200  //圆心Y坐标

static const short sinTable[360] = {
     0,    571,   1143,   1714,   2285,   2855,   3425,   3993,   4560,   5126,
  5690,   6252,   6812,   7371,   7927,   8480,   9032,   9580,  10125,  10668,
 11207,  11742,  12275,  12803,  13327,  13848,  14364,  14876,  15383,  15886,
 16383,  16876,  17364,  17846,  18323,  18794,  19260,  19720,  20173,  20621,
 21062,  21497,  21926,  22347,  22762,  23170,  23571,  23964,  24351,  24730,
 25101,  25465,  25821,  26169,  26509,  26841,  27165,  27481,  27788,  28087,
 28377,  28659,  28932,  29196,  29451,  29697,  29935,  30163,  30381,  30591,
 30791,  30982,  31164,  31336,  31498,  31651,  31794,  31928,  32051,  32165,
 32270,  32364,  32449,  32523,  32588,  32643,  32688,  32723,  32748,  32763,
 32767,  32763,  32748,  32723,  32688,  32643,  32588,  32523,  32449,  32364,
 32270,  32165,  32051,  31928,  31794,  31651,  31498,  31336,  31164,  30982,
 30791,  30591,  30381,  30163,  29935,  29697,  29451,  29196,  28932,  28659,
 28377,  28087,  27788,  27481,  27165,  26842,  26509,  26169,  25821,  25465,
 25101,  24730,  24351,  23965,  23571,  23170,  22762,  22347,  21926,  21497,
 21062,  20621,  20174,  19720,  19260,  18795,  18323,  17846,  17364,  16876,
 16384,  15886,  15383,  14876,  14364,  13848,  13328,  12803,  12275,  11743,
 11207,  10668,  10125,   9580,   9032,   8481,   7927,   7371,   6812,   6252,
  5690,   5126,   4560,   3993,   3425,   2856,   2285,   1715,   1143,    571,
     0,   -571,  -1143,  -1714,  -2285,  -2855,  -3425,  -3993,  -4560,  -5125,
 -5690,  -6252,  -6812,  -7371,  -7927,  -8480,  -9031,  -9580, -10125, -10668,
-11207, -11742, -12275, -12803, -13327, -13848, -14364, -14876, -15383, -15886,
-16383, -16876, -17364, -17846, -18323, -18794, -19260, -19720, -20173, -20621,
-21062, -21497, -21925, -22347, -22762, -23170, -23571, -23964, -24351, -24730,
-25101, -25465, -25821, -26169, -26509, -26841, -27165, -27481, -27788, -28087,
-28377, -28659, -28932, -29196, -29451, -29697, -29935, -30163, -30381, -30591,
-30791, -30982, -31164, -31336, -31498, -31651, -31794, -31928, -32051, -32165,
-32270, -32364, -32449, -32523, -32588, -32643, -32688, -32723, -32748, -32763,
-32767, -32763, -32748, -32723, -32688, -32643, -32588, -32523, -32449, -32364,
-32270, -32165, -32051, -31928, -31794, -31651, -31498, -31336, -31164, -30982,
-30791, -30591, -30382, -30163, -29935, -29697, -29451, -29196, -28932, -28659,
-28377, -28087, -27788, -27481, -27165, -26842, -26509, -26169, -25821, -25465,
-25101, -24730, -24351, -23965, -23571, -23170, -22762, -22347, -21926, -21497,
-21062, -20621, -20174, -19720, -19260, -18795, -18323, -17846, -17364, -16876,
-16384, -15886, -15383, -14876, -14364, -13848, -13328, -12803, -12275, -11743,
-11207, -10668, -10126,  -9580,  -9032,  -8481,  -7927,  -7371,  -6813,  -6252,
 -5690,  -5126,  -4560,  -3993,  -3425,  -2856,  -2285,  -1715,  -1143,   -572,
};
static const short cosTable[360] = {
 32767,  32763,  32748,  32723,  32688,  32643,  32588,  32523,  32449,  32364,
 32270,  32165,  32051,  31928,  31794,  31651,  31498,  31336,  31164,  30982,
 30791,  30591,  30381,  30163,  29935,  29697,  29451,  29196,  28932,  28659,
 28377,  28087,  27788,  27481,  27165,  26841,  26509,  26169,  25821,  25465,
 25101,  24730,  24351,  23965,  23571,  23170,  22762,  22347,  21926,  21497,
 21062,  20621,  20174,  19720,  19260,  18794,  18323,  17846,  17364,  16876,
 16384,  15886,  15383,  14876,  14364,  13848,  13327,  12803,  12275,  11743,
 11207,  10668,  10125,   9580,   9032,   8481,   7927,   7371,   6812,   6252,
  5690,   5126,   4560,   3993,   3425,   2855,   2285,   1714,   1143,    571,
     0,   -571,  -1143,  -1714,  -2285,  -2855,  -3425,  -3993,  -4560,  -5125,
 -5690,  -6252,  -6812,  -7371,  -7927,  -8480,  -9032,  -9580, -10125, -10668,
-11207, -11742, -12275, -12803, -13327, -13848, -14364, -14876, -15383, -15886,
-16383, -16876, -17364, -17846, -18323, -18794, -19260, -19720, -20173, -20621,
-21062, -21497, -21926, -22347, -22762, -23170, -23571, -23964, -24351, -24730,
-25101, -25465, -25821, -26169, -26509, -26841, -27165, -27481, -27788, -28087,
-28377, -28659, -28932, -29196, -29451, -29697, -29935, -30163, -30381, -30591,
-30791, -30982, -31164, -31336, -31498, -31651, -31794, -31928, -32051, -32165,
-32270, -32364, -32449, -32523, -32588, -32643, -32688, -32723, -32748, -32763,
-32767, -32763, -32748, -32723, -32688, -32643, -32588, -32523, -32449, -32364,
-32270, -32165, -32051, -31928, -31794, -31651, -31498, -31336, -31164, -30982,
-30791, -30591, -30381, -30163, -29935, -29697, -29451, -29196, -28932, -28659,
-28377, -28087, -27788, -27481, -27165, -26842, -26509, -26169, -25821, -25465,
-25101, -24730, -24351, -23965, -23571, -23170, -22762, -22347, -21926, -21497,
-21062, -20621, -20174, -19720, -19260, -18795, -18323, -17846, -17364, -16876,
-16384, -15886, -15383, -14876, -14364, -13848, -13328, -12803, -12275, -11743,
-11207, -10668, -10125,  -9580,  -9032,  -8481,  -7927,  -7371,  -6812,  -6252,
 -5690,  -5126,  -4560,  -3993,  -3425,  -2856,  -2285,  -1715,  -1143,   -572,
     0,    571,   1143,   1714,   2285,   2855,   3425,   3993,   4560,   5125,
  5689,   6252,   6812,   7371,   7927,   8480,   9031,   9580,  10125,  10668,
 11207,  11742,  12274,  12803,  13327,  13848,  14364,  14876,  15383,  15886,
 16383,  16876,  17364,  17846,  18323,  18794,  19260,  19720,  20173,  20621,
 21062,  21497,  21925,  22347,  22762,  23170,  23571,  23964,  24351,  24730,
 25101,  25465,  25821,  26169,  26509,  26841,  27165,  27481,  27788,  28087,
 28377,  28659,  28932,  29196,  29451,  29697,  29934,  30163,  30381,  30591,
 30791,  30982,  31164,  31336,  31498,  31651,  31794,  31928,  32051,  32165,
 32270,  32364,  32449,  32523,  32588,  32643,  32688,  32723,  32748,  32763
};

static ITUCoverFlow* setupCoverFlow;
static ITUBackground* setupBackgroundChild[10] = { 0 };
static ITUIcon* setupText[10] = { 0 };

static void arrangePosition()
{
	int i;
	for (i = 0; i < 10; i++) {
		if (ituWidgetGetY(setupBackgroundChild[i]) < 0 || ituWidgetGetY(setupBackgroundChild[i]) > 480) {
			ituWidgetSetVisible(setupText[i], false);
			continue;
		}
		ituWidgetSetVisible(setupText[i], true);
		ituWidgetSetPosition(setupText[i],
			CYCLE_X - (CYCLE_R * (int)sinTable[ituWidgetGetY(setupBackgroundChild[i]) * 90 / CYCLE_R] >> 15),
			CYCLE_Y - (CYCLE_R * (int)cosTable[ituWidgetGetY(setupBackgroundChild[i]) * 90 / CYCLE_R] >> 15));
	}
}
bool setupOnEnter(ITUWidget* widget, char* param)
{
    static char name[30];
	int i;

    if (!setupCoverFlow) {
        setupCoverFlow = ituSceneFindWidget(&theScene, "setupCoverFlow"); assert(setupCoverFlow);

		for (i = 0; i < 10; i++) {
			sprintf(name, "setupText%d", i);
            setupText[i] = ituSceneFindWidget(&theScene, name); assert(setupText[i]);
			setupBackgroundChild[i] = (ITUBackground*)itcTreeGetChildAt(setupCoverFlow, i); assert(setupBackgroundChild[i]);
			//ituWidgetSetHeight(setupBackgroundChild[i],96);
		}
    }
	arrangePosition();
    return true;
}

bool setup_timer(ITUWidget* widget, char* param)
{
	int i, x;
    ituCoverFlowNext(setupCoverFlow);
	ituWidgetUpdate(setupBackgroundChild[setupCoverFlow->focusIndex], ITU_EVENT_LAYOUT, 0, 0, 0);
    arrangePosition();
	return true;
}

void setupReset(void)
{
    setupCoverFlow = NULL;
}
#+END_SRC
* font
px:相对长度单位。像素（Pixel）。
pt:绝对长度单位。点（Point）。
1in = 2.54cm = 25.4 mm = 72pt = 6pc
具体换算是：
Points Pixels Ems      Percent
6pt    8px    0.5em    50%
7pt    9px    0.55em   55%
7.5pt  10px   0.625em  62.5%
8pt    11px   0.7em    70%
9pt    12px   0.75em   75%
10pt   13px   0.8em    80%
10.5pt 14px   0.875em  87.5%
11pt   15px   0.95em   95%
12pt   16px   1em      100%
13pt   17px   1.05em   105%
13.5pt 18px   1.125em  112.5%
14pt   19px   1.2em    120%
14.5pt 20px   1.25em   125%
15pt   21px   1.3em    130%
16pt   22px   1.4em    140%
17pt   23px   1.45em   145%
18pt   24px   1.5em    150%
20pt   26px   1.6em    160%
22pt   29px   1.8em    180%
24pt   32px   2em      200%
26pt   35px   2.2em    220%
27pt   36px   2.25em   225%
28pt   37px   2.3em    230%
29pt   38px   2.35em   235%
30pt   40px   2.45em   245%
32pt   42px   2.55em   255%
34pt   45px   2.75em   275%
36pt   48px   3em      300%

像素与毫米的转换
转换还需要知道另一个参数：DPI（每英寸多少点）
象素数 / DPI = 英寸数 英寸数 * 25.4 = 毫米数
对于显示设备，不管是打印机还是屏幕，
都有一种通用的方法
先用GetDeviceCaps(设备句柄，LOGPIXELSX)
或者 GetDeviceCaps(设备句柄，LOGPIXELSY)获得设备每英寸的像素数
分别记为：px 和 py 一英寸等于25.4mm
那么毫米换算成像素的公式为
水平方向的换算：
x * px /25.4
垂直方向的换算：
y * py /25.4 像素换算为毫米
x * 25.4 / px
在程序中这么写
MyControl.Height := 10{mm} * PixelsPerInch * 10 div 254;
分子和分母同乘以10，将浮点数运算转化为整数运算，效率更高
常用的1024x768或800x600等标准的分辨率计算出来的dpi是一个常数：96，
因此计算出来的毫米与像素的关系也约等于一个常数：
基本上 1毫米 约等于 3.78像素

ui设计师有可能给到的字体尺寸是px单位,而ite适用的是pt单位的.要转换.
